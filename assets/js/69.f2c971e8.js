(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{424:function(t,i,v){"use strict";v.r(i);var a=v(15),e=Object(a.a)({},(function(){var t=this,i=t._self._c;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("h1",{attrs:{id:"git-add"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-add"}},[t._v("#")]),t._v(" git add")]),t._v(" "),i("p",[t._v("放到暂存区")]),t._v(" "),i("h1",{attrs:{id:"git-commit"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-commit"}},[t._v("#")]),t._v(" git commit")]),t._v(" "),i("ul",[i("li",[t._v("git commit -m '修改说明'")]),t._v(" "),i("li",[t._v("git commit --amend 修改最近一次提交")]),t._v(" "),i("li",[t._v("git commit -m '修改说明' --no-verify 跳过 commit 验证")])]),t._v(" "),i("p",[t._v("创建版本")]),t._v(" "),i("h1",{attrs:{id:"git-push"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-push"}},[t._v("#")]),t._v(" git push")]),t._v(" "),i("p",[t._v("提交到远程仓库")]),t._v(" "),i("h1",{attrs:{id:"git-status"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-status"}},[t._v("#")]),t._v(" git status")]),t._v(" "),i("p",[t._v("查看当前项目有那些改动")]),t._v(" "),i("h1",{attrs:{id:"git-log-查看提交记录"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-log-查看提交记录"}},[t._v("#")]),t._v(" git log 查看提交记录")]),t._v(" "),i("p",[t._v("查看提交记录\n键盘"),i("code",[t._v("Q")]),t._v("退出查看")]),t._v(" "),i("ol",[i("li",[t._v("git log 查看提交历史记录")]),t._v(" "),i("li",[t._v("git log --oneline 或者 git log --pretty=oneline 以精简模式显示\n如"),i("code",[t._v("git log --pretty=oneline index.html")])]),t._v(" "),i("li",[t._v("git log --graph 以图形模式显示版本路线")]),t._v(" "),i("li",[t._v("git log --name-only 现实文件名修改")]),t._v(" "),i("li",[t._v("git log --name-status")]),t._v(" "),i("li",[t._v("git log --stat 显示文件更改列表")]),t._v(" "),i("li",[t._v("git log --author= 'name' 显示某个作者的日志")]),t._v(" "),i("li",[t._v("git log -p filepath 查看某个文件的详细修改")]),t._v(" "),i("li",[t._v("git log -p -1 查看最近一次提交的修改记录")]),t._v(" "),i("li",[t._v("git log -L start,end:filepath 查看某个文件某几行范围内的修改记录")]),t._v(" "),i("li",[t._v("git log --stat commitId 或者 git show --stat commitId 查看某一次提交的文件修改列表")])]),t._v(" "),i("h1",{attrs:{id:"git-restore"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-restore"}},[t._v("#")]),t._v(" git restore")]),t._v(" "),i("p",[t._v("撤销修改,将文件从暂存区撤回")]),t._v(" "),i("h1",{attrs:{id:"git-config-配置信息"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-config-配置信息"}},[t._v("#")]),t._v(" git config 配置信息")]),t._v(" "),i("ul",[i("li",[t._v("git config --global user.name '星仔'")]),t._v(" "),i("li",[t._v("git config --global user.email 'wx1620@163.com'")]),t._v(" "),i("li",[t._v("git config --global --list")])]),t._v(" "),i("h1",{attrs:{id:"git-rm-删除文件"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-rm-删除文件"}},[t._v("#")]),t._v(" git rm 删除文件")]),t._v(" "),i("ul",[i("li",[t._v("git rm index.html 版本库和本地都删除")]),t._v(" "),i("li",[t._v("git rm --cached index.html 版本库删除本地不删除")])]),t._v(" "),i("h1",{attrs:{id:"git-mv-重命名"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-mv-重命名"}},[t._v("#")]),t._v(" git mv 重命名")]),t._v(" "),i("ul",[i("li",[t._v("git mv oldFileName newFileName\ngit mv 命令也可以移动文件位置\n如"),i("code",[t._v("git mv index.html home/index.html")]),t._v("\n将 index.html 移动到 home 文件夹下")])]),t._v(" "),i("h1",{attrs:{id:"git-show-显示更改信息"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-show-显示更改信息"}},[t._v("#")]),t._v(" git show 显示更改信息")]),t._v(" "),i("ul",[i("li",[t._v("git show commitId 显示一次 commit 的修改信息")])]),t._v(" "),i("h1",{attrs:{id:"git-checkout"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-checkout"}},[t._v("#")]),t._v(" git checkout")]),t._v(" "),i("ul",[i("li",[t._v("git checkout -- index.html")]),t._v(" "),i("li",[t._v("git checkout commitId -- index.html")])]),t._v(" "),i("h1",{attrs:{id:"git-reset"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-reset"}},[t._v("#")]),t._v(" git reset")]),t._v(" "),i("ul",[i("li",[t._v("git reset HEAD index.html")]),t._v(" "),i("li",[t._v("git reset --hard HEAD^ 恢复到上一个版本")]),t._v(" "),i("li",[t._v("git reset --hard commitId 恢复到指定版本\ncommitId 可以是全部的 id 也可以是前几位")])]),t._v(" "),i("h1",{attrs:{id:"git-push-推送"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-push-推送"}},[t._v("#")]),t._v(" git push 推送")]),t._v(" "),i("ul",[i("li",[t._v("git push origin master")])]),t._v(" "),i("h1",{attrs:{id:"git-tag-创建标签"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-tag-创建标签"}},[t._v("#")]),t._v(" git tag 创建标签")]),t._v(" "),i("ul",[i("li",[t._v("git tag v1.0")]),t._v(" "),i("li",[t._v("git tag")]),t._v(" "),i("li",[t._v("git tag v0.5 commitId")]),t._v(" "),i("li",[t._v("git tag -d v0.5 删除标签")]),t._v(" "),i("li",[t._v("git push origin v1.0 提交标签")])]),t._v(" "),i("h1",{attrs:{id:"git-branch-分支"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-branch-分支"}},[t._v("#")]),t._v(" git branch 分支")]),t._v(" "),i("ul",[i("li",[t._v("git branch dev 创建一个名字为 dev 的分支")]),t._v(" "),i("li",[t._v("git branch 查看分支")]),t._v(" "),i("li",[t._v("git branch -a 查看分支包括远程分支")]),t._v(" "),i("li",[t._v("git checkout dev 切换到 dev 分支")]),t._v(" "),i("li",[t._v("git branch -d dev 删除 dev 分支(不能删除当前所在分支，不能删除有 commit 的分支)")]),t._v(" "),i("li",[t._v("git branch -D dev 强制删除 dev 分支，即使有过 commit 也可以删除")]),t._v(" "),i("li",[t._v("git checkout -b test 创建 test 分支并切换到 test 分支")]),t._v(" "),i("li",[t._v("git merge dev 合并分支 dev")]),t._v(" "),i("li",[t._v("git merge --abort 处理冲突保留当前分支中的代码")]),t._v(" "),i("li",[t._v("git push origin --delete summer 删除 summer 分支")])]),t._v(" "),i("p",[t._v("本地仓库在想做同步远程仓库到本地为之后本地仓库推送到远程仓库做准备时报错了，错误如下：")]),t._v(" "),i("p",[t._v("fatal: refusing to merge unrelated histories\n（拒绝合并不相关的历史）")]),t._v(" "),i("p",[t._v("出现这个问题的最主要原因还是在于本地仓库和远程仓库实际上是独立的两个仓库。假如我之前是直接 clone 的方式在本地建立起远程 github 仓库的克隆本地仓库就不会有这问题了。")]),t._v(" "),i("p",[t._v("git pull origin master –allow-unrelated-histories")])])}),[],!1,null,null,null);i.default=e.exports}}]);